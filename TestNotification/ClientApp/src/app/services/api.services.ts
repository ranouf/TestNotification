/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class NotificationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(type: number): Observable<GroupedResultDtoOfNotificationDto | null> {
        let url_ = this.baseUrl + "/api/Notification?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<GroupedResultDtoOfNotificationDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupedResultDtoOfNotificationDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<GroupedResultDtoOfNotificationDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GroupedResultDtoOfNotificationDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupedResultDtoOfNotificationDto | null>(<any>null);
    }
}

export class GroupedResultDtoOfNotificationDtoAndGuid implements IGroupedResultDtoOfNotificationDtoAndGuid {
    totalCount!: number;
    groupItems?: GroupItemDtoOfNotificationDtoAndGuid[] | undefined;
    hasNext!: boolean;

    constructor(data?: IGroupedResultDtoOfNotificationDtoAndGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["groupItems"] && data["groupItems"].constructor === Array) {
                this.groupItems = [];
                for (let item of data["groupItems"])
                    this.groupItems.push(GroupItemDtoOfNotificationDtoAndGuid.fromJS(item));
            }
            this.hasNext = data["hasNext"];
        }
    }

    static fromJS(data: any): GroupedResultDtoOfNotificationDtoAndGuid {
        data = typeof data === 'object' ? data : {};
        let result = new GroupedResultDtoOfNotificationDtoAndGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.groupItems && this.groupItems.constructor === Array) {
            data["groupItems"] = [];
            for (let item of this.groupItems)
                data["groupItems"].push(item.toJSON());
        }
        data["hasNext"] = this.hasNext;
        return data; 
    }
}

export interface IGroupedResultDtoOfNotificationDtoAndGuid {
    totalCount: number;
    groupItems?: GroupItemDtoOfNotificationDtoAndGuid[] | undefined;
    hasNext: boolean;
}

export class GroupedResultDtoOfNotificationDto extends GroupedResultDtoOfNotificationDtoAndGuid implements IGroupedResultDtoOfNotificationDto {

    constructor(data?: IGroupedResultDtoOfNotificationDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GroupedResultDtoOfNotificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new GroupedResultDtoOfNotificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGroupedResultDtoOfNotificationDto extends IGroupedResultDtoOfNotificationDtoAndGuid {
}

export class GroupItemDtoOfNotificationDtoAndGuid implements IGroupItemDtoOfNotificationDtoAndGuid {
    item?: AbstractItemDto | undefined;
    items?: NotificationDto[] | undefined;

    constructor(data?: IGroupItemDtoOfNotificationDtoAndGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.item = data["item"] ? AbstractItemDto.fromJS(data["item"]) : <any>undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NotificationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GroupItemDtoOfNotificationDtoAndGuid {
        data = typeof data === 'object' ? data : {};
        let result = new GroupItemDtoOfNotificationDtoAndGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGroupItemDtoOfNotificationDtoAndGuid {
    item?: AbstractItemDto | undefined;
    items?: NotificationDto[] | undefined;
}

export abstract class AbstractItemDto implements IAbstractItemDto {

    constructor(data?: IAbstractItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
        }
    }

    static fromJS(data: any): AbstractItemDto {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'AbstractItemDto' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAbstractItemDto {
}

export class ItemDtoOfString extends AbstractItemDto implements IItemDtoOfString {
    key?: string | undefined;
    discriminator?: string | undefined;

    constructor(data?: IItemDtoOfString) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.key = data["key"];
            this.discriminator = data["discriminator"];
        }
    }

    static fromJS(data: any): ItemDtoOfString {
        data = typeof data === 'object' ? data : {};
        let result = new ItemDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["discriminator"] = this.discriminator;
        super.toJSON(data);
        return data; 
    }
}

export interface IItemDtoOfString extends IAbstractItemDto {
    key?: string | undefined;
    discriminator?: string | undefined;
}

export class ItemDtoOfUserDto extends AbstractItemDto implements IItemDtoOfUserDto {
    key?: UserDto | undefined;
    discriminator?: string | undefined;

    constructor(data?: IItemDtoOfUserDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.key = data["key"] ? UserDto.fromJS(data["key"]) : <any>undefined;
            this.discriminator = data["discriminator"];
        }
    }

    static fromJS(data: any): ItemDtoOfUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemDtoOfUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key ? this.key.toJSON() : <any>undefined;
        data["discriminator"] = this.discriminator;
        super.toJSON(data);
        return data; 
    }
}

export interface IItemDtoOfUserDto extends IAbstractItemDto {
    key?: UserDto | undefined;
    discriminator?: string | undefined;
}

export class EntityDtoOfNullableOfGuid implements IEntityDtoOfNullableOfGuid {
    id?: string | undefined;

    constructor(data?: IEntityDtoOfNullableOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfNullableOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfNullableOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfNullableOfGuid {
    id?: string | undefined;
}

export class UserDto extends EntityDtoOfNullableOfGuid implements IUserDto {
    firstname?: string | undefined;
    lastname?: string | undefined;

    constructor(data?: IUserDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.firstname = data["firstname"];
            this.lastname = data["lastname"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstname"] = this.firstname;
        data["lastname"] = this.lastname;
        super.toJSON(data);
        return data; 
    }
}

export interface IUserDto extends IEntityDtoOfNullableOfGuid {
    firstname?: string | undefined;
    lastname?: string | undefined;
}

export class ItemDtoOfNotificationDto extends AbstractItemDto implements IItemDtoOfNotificationDto {
    key?: NotificationDto | undefined;
    discriminator?: string | undefined;

    constructor(data?: IItemDtoOfNotificationDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.key = data["key"] ? NotificationDto.fromJS(data["key"]) : <any>undefined;
            this.discriminator = data["discriminator"];
        }
    }

    static fromJS(data: any): ItemDtoOfNotificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemDtoOfNotificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key ? this.key.toJSON() : <any>undefined;
        data["discriminator"] = this.discriminator;
        super.toJSON(data);
        return data; 
    }
}

export interface IItemDtoOfNotificationDto extends IAbstractItemDto {
    key?: NotificationDto | undefined;
    discriminator?: string | undefined;
}

export class EntityDtoOfGuid implements IEntityDtoOfGuid {
    id!: string;

    constructor(data?: IEntityDtoOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfGuid {
    id: string;
}

export class EntityDto extends EntityDtoOfGuid implements IEntityDto {

    constructor(data?: IEntityDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): EntityDto {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IEntityDto extends IEntityDtoOfGuid {
}

export class NotificationDto extends EntityDto implements INotificationDto {
    action?: string | undefined;
    label?: string | undefined;
    entity?: any | undefined;
    discriminator?: string | undefined;
    createdBy?: string | undefined;
    createdAt!: Date;

    constructor(data?: INotificationDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.action = data["action"];
            this.label = data["label"];
            this.entity = data["entity"];
            this.discriminator = data["discriminator"];
            this.createdBy = data["createdBy"];
            this.createdAt = data["createdAt"] ? new Date(data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): NotificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["action"] = this.action;
        data["label"] = this.label;
        data["entity"] = this.entity;
        data["discriminator"] = this.discriminator;
        data["createdBy"] = this.createdBy;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface INotificationDto extends IEntityDto {
    action?: string | undefined;
    label?: string | undefined;
    entity?: any | undefined;
    discriminator?: string | undefined;
    createdBy?: string | undefined;
    createdAt: Date;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}